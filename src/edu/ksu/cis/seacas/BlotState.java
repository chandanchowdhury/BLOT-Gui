/**
 * 
 */
package edu.ksu.cis.seacas;

import java.util.logging.*;
import java.io.*;

/**
 * @author chandan
 * 
 * A simple java class to maintain the state of the plot.
 */
class BlotState {
	
	private String blotExodusFile = "";
	private String blotExodusFileDir = "";
	private String blotCmdText = "";

	private int blotCurrent_x = 0;
	private int blotCurrent_y = 0;
	private int blotCurrent_z = 0;
	private String ps_path = "";
	private String img_path = "";
	
	private String blotMakefileTempalte = "./MakefileTemplate.txt";
	private String blotInputFile = "blot_cmd.txt";
	private String blotCmdTempltPreFile = "BlotCmdTempltPre.txt";
	private String blotCmdTempltPostFile = "BlotCmdTempltPost.txt";
	
	//private String blotPSFile =  ".ps ";
	
	//private String blotImgFile  =  " blot-IMG.png ";
	
	private final Logger logger = 
		Logger.getLogger(this.getClass().getPackage().getName());
	
	/**
	 * Update the Blot Command file with new coordinates.
	 */
	public void updateCmdFile() {
		
		FileReader blotCmdTempltPre;
		FileReader blotCmdTempltPost;
		FileWriter blotCmdFile;
		
		int lineData;
		String lineDataStr; 

		logger.entering(this.getClass().toString(),"updateCmdFile()");
		
		try {
			blotCmdTempltPre = new FileReader(blotCmdTempltPreFile);
			blotCmdTempltPost = new FileReader(blotCmdTempltPostFile);
			blotCmdFile = new FileWriter(blotInputFile);
			
			// Copy the pre-rotation commands from BlotCmdTempltPre.txt
			while((lineData = blotCmdTempltPre.read()) != -1) {
				blotCmdFile.write(lineData);
			}
			
			lineDataStr = "\n$ --- Auto-generated by BlotState.java --- \n";
			blotCmdFile.write("\n"+lineDataStr);
			
			//Write the rotation commands
			lineDataStr = "ROTATE X " + Integer.toString(blotCurrent_x);
			blotCmdFile.write("\n"+lineDataStr);
			logger.info(lineDataStr);
			
			lineDataStr = "ROTATE Y " + Integer.toString(blotCurrent_y);
			blotCmdFile.write("\n"+lineDataStr);
			logger.info(lineDataStr);
			
			lineDataStr = "ROTATE Z " + Integer.toString(blotCurrent_z);
			blotCmdFile.write("\n"+lineDataStr);
			logger.info(lineDataStr);
			
			lineDataStr = "\n$ --- Auto-generation Ends --- \n\n";
			blotCmdFile.write("\n"+lineDataStr);
			
			blotCmdFile.write(this.blotCmdText);
			
			// Copy the post-rotation commands from BlotCmdTempltPost.txt
			while((lineData = blotCmdTempltPost.read()) != -1) {
				blotCmdFile.write(lineData);
			}
			
			
			blotCmdTempltPre.close();
			blotCmdTempltPost.close();
			blotCmdFile.close();
			
		}
		catch(IOException e) {
			logger.severe("Error: File Error"+e.getMessage());
		}
	}
	
	/**
	 * Update the Makefile to be used by make to generate the PS and JPEG.
	 * 
	 */
	public void updateMakeFile() {
		FileReader makeFileTmplt;
		FileWriter makeFile;

		int lineData;

		//System.out.println("\nCurrent directory: "+System.getProperty("user.dir"));
		logger.info("Current directory: "+System.getProperty("user.dir"));
		try {
			makeFileTmplt = new FileReader(blotMakefileTempalte);
			makeFile = new FileWriter("Makefile");

			//System.out.println("EXODUS_FILE="+blotExodusFile);
			//System.out.println("CMD_FILE="+blotInputFile);
			
			// Set the file details into Makefie
			makeFile.write("EXODUS_DIR="+blotExodusFileDir+"\n");
			makeFile.write("\nEXODUS_FILE="+blotExodusFile+"\n");
			makeFile.write("\nCMD_FILE="+blotInputFile+"\n");
	
			// Copy the contents from MakefileTemplate.txt
			while((lineData = makeFileTmplt.read()) != -1) {
				makeFile.write(lineData);
			}
			
			makeFileTmplt.close();
			makeFile.close();
		}
		catch(IOException e) {
			logger.severe("Error: File Error"+e.getMessage());
			//System.out.println("Error: File Error");
			//System.out.println(e);
		}
		
	}
	
	/**
	 * This will execute the Blot command and save the output on PS and also convert into GIF.
	 * Later, the Get can be used to get the new image. 
	 * 
	 * @return Success code. Zero is OK. 
	 */
	public int execute() {
		
		logger.entering(this.getClass().toString(),"execute()");
		//System.out.println("\n--BlotState.execute() --\n");
		try {
			Runtime runtime = Runtime.getRuntime();
			Process proc = runtime.exec(new String[] {"bash","-c","make"});
			
			proc.waitFor();
			
			logger.info("Result from make: "+proc.exitValue());
			
			if (proc.exitValue() > 0) {
				BufferedReader input = new BufferedReader(new InputStreamReader(proc.getErrorStream()));
			    String line = null; 
			    
			    while ((line = input.readLine()) != null) {
			            logger.info(line);
			    }
			    input.close();
			     
			}
			proc.destroy();
		}
		catch(IOException e) {
			e.printStackTrace();
			logger.severe("Failed to execute make: "+e.getMessage());
			return -1;
		} catch (InterruptedException e) {
			e.printStackTrace();
			return -1;
		}
		
		return 0;
	}
	
	
	public String getBlotExodusFileDir() {
		return blotExodusFileDir;
	}

	public void setBlotExodusFileDir(String blotExodusFileDir) {
		this.blotExodusFileDir = blotExodusFileDir;
	}

	public String getExodus_file() {
		return blotExodusFile;
	}
	
	public void setExodus_file(String exodus_file) {
		this.blotExodusFile = exodus_file;
		this.setImg_path(blotExodusFile+".jpg");
	}
	
	public int getCurrent_x() {
		return blotCurrent_x;
	}
	
	public void setCurrent_x(int current_x) {
		this.blotCurrent_x = current_x;
	}
	
	public int getCurrent_y() {
		return blotCurrent_y;
	}
	
	public void setCurrent_y(int current_y) {
		this.blotCurrent_y = current_y;
	}
	
	public int getCurrent_z() {
		return blotCurrent_z;
	}
	
	public void setCurrent_z(int current_z) {
		this.blotCurrent_z = current_z;
	}
	
	public String getPs_path() {
		return ps_path;
	}
	
	public void setPs_path(String ps_path) {
		this.ps_path = ps_path;
	}
	
	public String getImg_path() {
		return img_path;
	}
	
	public void setImg_path(String img_path) {
		this.img_path = img_path;
	}
	
	public String getBlotCmdText() {
		return blotCmdText;
	}

	public void setBlotCmdText(String blotCmdText) {
		this.blotCmdText = blotCmdText;
	}
	
	public static void main(String[] args) {
		BlotState bst = new BlotState();
		// Exodus file name will be set by calling routine
		bst.setExodus_file("c_final.e");

		// We should calculate the new rotation values and 
		// update the input command file.
		//bst.updateInputFile();

		// Update the Makefile 
		bst.updateMakeFile();
		
		bst.updateCmdFile();

		// Execute make to create the image.
		bst.execute();
	}
}
